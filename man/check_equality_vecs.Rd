% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_cross_vecs.R
\name{check_equality_vecs}
\alias{check_equality_vecs}
\title{Check the ordered equality of two vectors}
\usage{
check_equality_vecs(
  vec1,
  vec2,
  vec1_arg = "vec1",
  vec2_arg = "vec2",
  recycle = FALSE,
  coerce = FALSE,
  raise = "error",
  alert_message = NULL,
  quickalert = TRUE,
  n_evaluation_frame = 0,
  ...
)
}
\arguments{
\item{vec1}{First vector.}

\item{vec2}{Second vector.}

\item{vec1_arg}{string indicating how to address vec1 in the raised message (default 'vec1').}

\item{vec2_arg}{string indicating how to address vec2 in the raised message (default 'vec2)'.}

\item{recycle}{Boolean indicating whether to allow vector recycling (default FALSE).}

\item{coerce}{Boolean indicating whether the two vectors can be coerced during the check (default FALSE).
If FALSE a check on vector classes is performed before the main check. This check is performed using the identical function.
Therefore the vector classes must be perfectly identical in order to pass the check.}

\item{raise}{Character string equal to one of "error", "warning" or "message" (default error). Set the type of alert that is created.}

\item{alert_message}{Character vector reporting the alert message. Default NULL, in this case a standard message is used.
It's also possible to pass a list of strings that is displayed as a nominated or numbered list.}

\item{quickalert}{logical, whether the raised alert has to be of class "quickalert".}

\item{n_evaluation_frame}{Numeric, defines the number of stack frame to look down for the evaluation of the glue expressions of the alert message.
The default (0) points to this function frame.}

\item{...}{not of direct use.}
}
\value{
invisible NULL
}
\description{
Equality is verified using "==", meaning that both the order of values and the presence of duplicates are taken into account.
To ignore order or duplicates, consider using the "check_unordered_equality_vecs" function.
In addition the equality operator allows for automating recycling and coercion, behaviors that can be indirectly controlled
performing preliminary checks using the recycle and coerce parameters.
}
